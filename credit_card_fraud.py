# -*- coding: utf-8 -*-
"""Credit-card-fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Ao01FbZg5JUHE4vs92da40Oe4FqtV1M
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df= pd.read_csv("/content/creditcard[1].csv")
df.head()

df.shape

df.isnull().sum()

df = df.dropna()

df.info()

df['Class'].value_counts()

"""Data is highly unbalanced

0 --> legit
1 --> fraud
"""

#seperating the data for analysis
legit = df[df.Class == 0]
fraud = df[df.Class == 1]
print(legit.shape)
print(fraud.shape)

legit.Amount.describe()

fraud.Amount.describe()

df.groupby('Class').mean()

"""Under Sampling

build a sample data set containing similar distriibution of normal transaction and fraudulent transaction
"""

#taking random sample from legit(normal transaction)
legit_sample = legit.sample(n=492)

#concatinating 2 data frame
new_df = pd.concat([legit_sample, fraud], axis= 0)
new_df.head()

new_df['Class'].value_counts()

#splittng the data into features and target
X = new_df.drop(['Class','Time'], axis = 1)

Y = new_df['Class']
print(X)
print(Y)

#splitting the data into training and testing
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

#training the model
model = LogisticRegression()
model.fit(X_train, Y_train)

#train accuracy
train_predict = model.predict(X_train)
train_accuracy = accuracy_score(train_predict, Y_train)
print(train_accuracy)

#predicting
test_predict = model.predict(X_test)
test_accuracy = accuracy_score(test_predict, Y_test)
print(test_accuracy)